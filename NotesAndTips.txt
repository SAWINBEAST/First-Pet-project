//Заметки и советы для создания идеала

// Крайние нерешённые задачи:
// - не могу удалить все карты (найти) в REMOVE_ALL
// - я специально поменял int на string в переменных данных карт.( enter_new() , chang_nums_seclev() ). Наверное, это лажа.
// - проверка choice1 на тип int
// - посмотреть функции IsLoggedIn / Registration / RemoveCard? Я в них задаю переменные в функциях прям. И там же запрашиваю их из консоли. Это же неправильно?
//...


// Нужно добавить больше:
// - SOLID принципов (например, сделать для каждой задачи свой личный класс) (1. Single Responsibility (Принцип единственной ответственности) ; 2.O — Open-Closed (Принцип открытости-закрытости) ; 3.Liskov Substitution (Принцип подстановки Барбары Лисков(наследственность)) ; 4.Interface Segregation(Принцип разделения интерфейсов) ; 5.Dependency Inversion (Принцип инверсии зависимостей) ;
// - Динамической памяти (+чистки)		// https://www.bestprog.net/ru/2018/09/25/dynamic-and-static-allocation-of-memory-advantages-and-disadvantages-allocating-memory-for-single-variables-by-the-operators-new-and-delete-possible-critical-situations-when-allocating-memory-init_ru/#q02
// - Указателей
// - Констант
// - Ссылок $
// - Переопределений операторов ввода\вывода
// - Шаблонов класса 
// - Контейнеров (Последовательных и Ассоциативных)
// - Исключений (и ее правильной обработки)
// - Абстрактных классов
// - Наследовательности $
// - Перегрузки операторов
// - Преобразования типов
// - Статических методов и полей(переменных)
// - this
// - Дружественных функций и Классов
//...


// Исправить и добавить:
// - проверку на существование такого файла (никнейма карты), в случае GET_CARD (чтобы выдавать подсказку, что такой карты нет, и клиент совершил ошибку при вводе никнэйма)
// - вход после login в ту область, где доступны только те карты, которые создал этот пользователь (путем создания новой папки, при создании аккаунта, куда и будут записываться все данные?)
// - сделать безопасность просмотра файлов на компе. Защита от посторонних
// - разделить все задачи из методов классов на личные методы. чтобы для каждой микрозадачи был свой метод.
// 
// - ?? добавить возможность моментального копирования данных из консоли (Нужно ли ?)
// - добавить " std:: " ко всем элементам of namespace std, требующим это. // Так как это признак хорошего тона И ускоряет работу программы.
// - можно добавить новые задачи. Например: 1) Показать все карты
//...


// Шаблон Класса

template <typename T, typename V>

class Transaction
{
public:

	Transaction(T fromAcc, T toAcc, V code, int sum):
		fromAccount(fromAcc), toAccount(toAcc), code(code), sum(sum)		// Прямая Инициализация - тут
	{ 
	 name = autoName; 
        price = autoPrice;		// Присвоение - это
	}

	~Transaction()
	{}

	// Геттеры :



	// Сеттеры :



	// Методы :



private:

	// Поля :

	T fromAccount;  // с какого счета
	T toAccount;    // на какой счет
	V code;         // код операции
	int sum;        // сумма перевода

protected:


};